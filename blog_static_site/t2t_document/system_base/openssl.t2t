openssl 非对称加密DSA,RSA区别与使用介绍
openssl,dsa,rsa,公钥,私钥,签名,加密
0bae052f-28c6-4d4d-a1f9-1d92f7a36d5a


%!Target  : html
%!Encoding: utf-8
%!Options : --toc --enum-title
%!preproc: IMGPATH .
%!preproc: SITE_URL http://www.51know.info/
%!postproc(html): @@ <BR>
%!postproc(xhtml): @@ <BR>
%!postproc(wiki): @@ <BR>
%!postproc(html): @@ <BR>
%%TOC


在日常系统管理工作中，需要作一些加解密的工作，通过openssl工具包就能完成我们很多需求！

= openssl RSA 加解密 =

RSA是基于数论中大素数的乘积难分解理论上的非对称加密法,使用公私钥的方法进行加解密@@
公钥 用于加密，它是向所有人公开的 ; 私钥用于解密，只有密文的接收者持有

- 生成一个密钥(私钥)
```
[root@hunterfu ~]# openssl genrsa -out private.key 1024
```

注意: 需要注意的是这个文件包含了公钥和密钥两部分，也就是说这个文件即可用来加密也可以用来解密,后面的1024是生成密钥的长度.

- 通过密钥文件private.key 提取公钥
```
[root@hunterfu ~]# openssl rsa -in private.key -pubout -out pub.key
```

- 使用公钥加密信息
```
[root@hunterfu ~]# echo -n "123456" | openssl rsautl -encrypt -inkey pub.key -pubin >encode.result
```

- 使用私钥解密信息

```
[root@hunterfu ~]#cat encode.result | openssl rsautl -decrypt  -inkey private.key
123456
```


至此，一次RSA加密解密的过程已经完成！


= openssl DSA签名与验证 =

和RSA加密解密过程相反，在DSA数字签名和认证中，发送者使用自己的私钥对文件或消息进行签名，接受者收到消息后使用发送者的公钥来验证签名的真实性@@
DSA只是一种算法，和RSA不同之处在于它不能用作加密和解密，也不能进行密钥交换，只用于签名,它比RSA要快很多.

- 生成一个密钥(私钥)
```
[root@hunterfu ~]# openssl dsaparam -out dsaparam.pem 1024
[root@hunterfu ~]# openssl gendsa -out privkey.pem dsaparam.pem
```

- 生成公钥
```
[root@hunterfu ~]# openssl dsa -in privkey.pem -out pubkey.pem -pubout
[root@hunterfu ~]# rm -fr dsaparam.pem
```

- 使用私钥签名
```
[root@hunterfu ~]# echo -n "123456" | openssl dgst -dss1 -sign privkey.pem > sign.result
```

- 使用公钥验证
```
[root@hunterfu ~]# echo -n "123456"  | openssl dgst -dss1 -verify pubkey.pem -signature sign.result
Verified OK
```


至此，一次DSA签名与验证过程完成！


= 总结及注意事项 =

- **注意**: 由于信息经过加密或者签名后，都变成不可读模式,为了方便终端查看和传输使用(url提交数据,需要作urlencode操作)，可以使用base64进行编码@@
 - **openssl enc -base64 -A** ：将加密后的信息使用base64编码 @@
 - **openssl enc -d -base64 -A** ： 将信息使用base64反编码 

- **java中此私钥需要转换下格式才能使用**:
```
[root@hunterfu ~]# openssl pkcs8 -topk8 -nocrypt -in private.key -outform PEM -out java_private.key
```

当然openssl 是一个很实用的加密工具包，还有很多东西值得学习和总结，以后有空再说！

